//- Coins Select Option

if(coinsDepositList)
    - coinsDepositList.sort((a, b) => a[0].localeCompare(b[0]));

    - var networks = []
    - coinsDepositList.forEach(coin => {
        - var network = coin[0].split('-')[1]
        - if (!networks.includes(network)) {
            - networks.push(network)
        - }
    - })
    - networks.sort((a, b) => a[0].localeCompare(b[0]));
    
    br
    p.open-modal.btn Select Coin

    .modal-overlay.hidden#coin-modal
        .modal-content
            .modal-header
                h2
                    u Select Coin
                p.close-btn &times;


            .filter-controls.custom-select(style="width:90%;")
                label(style="color:grey;") Select Network
                select#network-filter-modal
                    option(value="all") All Networks
                    each network in networks
                        option(value=network)= network

            br
            .search-controls
                .cool-input.floating
                    input#search-input-modal(type="text", placeholder="Search coins or networks...", style="width=90%;")
                
                p(onclick="toggleVisibility('SEARCH_OPTIONS')").options Search options
                #SEARCH_OPTIONS.hidden(style="margin:0; padding:0;")
                    .modal-radio
                        label Coin
                            input(type="radio", name="search-type-modal", value="coin")
                        label Network
                            input(type="radio", name="search-type-modal", value="network")
                        label All
                            input(type="radio", name="search-type-modal", value="all", checked)





            .coin-list
                //- each coin in coinsDepositList
                //-     - var coinName = coin[0].split('-')[0]
                //-     - var network = coin[0].split('-')[1]
                //-     .coin-item(data-value=coin, data-network=network, data-coin=coinName)
                //-         img(src=`icons/${coinName}-${network}.svg`, alt=coinName)
                //-         span.coin-label #{coinName} <small>(#{network})</small>

    select(name="payWith").hidden
    br
    p#SELECTION
    div(style="display: none; margin:0; padding:0;")#memoInput
        p The coin you choose uses 'Memo' associated to your address. Set the Memo of your sending address.
        input(type="string" name="memo" placeholder="Enter your Memo")
        p(style="color:darkred;") Memo is used to refund if anything wrong happens during payment. Else coins will be lost.
    br


script.
    function toggleVisibility(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            element.classList.toggle('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const modal = document.getElementById('coin-modal');
        const openModalBtn = document.querySelector('.open-modal');
        const closeModalBtn = document.querySelector('.close-btn');
        const searchInput = document.getElementById('search-input-modal');
        const networkFilter = document.getElementById('network-filter-modal');
        const searchTypeRadios = document.querySelectorAll('input[name="search-type-modal"]');
        const coinListContainer = document.querySelector('.coin-list');

        let currentSearchType = 'coin';

        // Toggle modal visibility
        if (openModalBtn) {
            openModalBtn.addEventListener('click', () => modal.classList.remove('hidden'));
        }

        closeModalBtn.addEventListener('click', () => modal.classList.add('hidden'));

        // Radio buttons for search type
        searchTypeRadios.forEach(radio => {
            radio.addEventListener('change', () => {
                currentSearchType = radio.value;
                filterCoins();
            });
        });

        // Filter coins based on input and network
        function filterCoins() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedNetwork = networkFilter.value;

            const coinItems = document.querySelectorAll('.coin-item');

            let counter = 0;

            coinItems.forEach(item => {
                const value = JSON.parse(item.dataset.value);
                const coinName = value[0].split('-')[0];
                const network = value[0].split('-')[1];

                let matchesSearch = false;

                switch (currentSearchType) {
                    case 'coin':
                        matchesSearch = coinName.toLowerCase().includes(searchTerm);
                        break;
                    case 'network':
                        matchesSearch = network.toLowerCase().includes(searchTerm);
                        break;
                    case 'all':
                        matchesSearch = coinName.toLowerCase().includes(searchTerm) || network.toLowerCase().includes(searchTerm);
                        break;
                }

                const isVisible = (selectedNetwork === 'all' || network === selectedNetwork) && matchesSearch;

                item.style.display = isVisible ? '' : 'none';
                if (isVisible) counter++;
            });

            // Update select box text dynamically
            const payWithSelect = document.querySelector('select[name="payWith"]');
            const firstVisible = coinListContainer.querySelector('.coin-item:not([style*="display: none"])');
            if (firstVisible && payWithSelect) {
                payWithSelect.value = firstVisible.dataset.value;
            }
            document.getElementById('ERROR').innerText = "";
            if(counter === 0) document.getElementById('ERROR').innerText = "No coin found";
        }

        // Event listeners
        networkFilter.addEventListener('change', filterCoins);
        searchInput.addEventListener('input', filterCoins);
        
        const coinsDepositList_ = !{JSON.stringify(coinsDepositList)}
        
        // Populate coin list dynamically from coinsDepositList
        if (coinsDepositList_) {
            coinListContainer.innerHTML = '<span id="ERROR"></span>';
            coinsDepositList_.forEach(coin => {
                const coinName = coin[0].split('-')[0];
                const network = coin[0].split('-')[1];
                const isAvailable = coin[2];

                const item = document.createElement('div');
                item.className = 'coin-item';
                item.dataset.value = JSON.stringify(coin); 
                item.dataset.coin = coinName;
                item.dataset.network = network;

                if(!isAvailable){
                    item.innerHTML = `
                        <img src="/icons/${coinName}-${network}.svg" class="disabled" alt="${coinName}">
                        <span class="/coin-label">${coinName} <small>(${network})</small></span>
                    `;
                    item.classList.add('disabled');
                } else {
                    item.innerHTML = `
                        <img src="/icons/${coinName}-${network}.svg" alt="${coinName}">
                        <span class="/coin-label">${coinName} <small>(${network})</small></span>
                    `;
                    item.addEventListener('click', () => {
                        const select = document.querySelector('select[name="payWith"]');
                        
                        if (select) {
                            // Use JSON.stringify to convert the entire coin array to a string
                            const coinValue = JSON.stringify(coin);
                            
                            // Check if option already exists
                            let existingOption = Array.from(select.options).find(opt => opt.value === coinValue);
                            
                            if (!existingOption) {
                                // Create new option if it doesn't exist
                                const option = document.createElement('option');
                                option.value = coinValue;  // Store the entire array as string value
                                option.textContent = coin[0]; // Display just the coin name
                                select.appendChild(option);
                            }
                            
                            // Select the option
                            select.value = coinValue;

                            // Update the SELECTION display with icon using CSS
                            const selectionElement = document.getElementById('SELECTION');
                            selectionElement.innerText = `Pay with:\n${coinName} (${network})\n`;
                            
                            // Add a span with icon class
                            const iconSpan = document.createElement('span');
                            iconSpan.style.cssText = `
                                display: inline-block;
                                width: 70px;
                                height: 70px;
                                margin: 10px;
                                background-image: url('/icons/${coinName}-${network}.svg');
                                background-size: contain;
                                background-repeat: no-repeat;
                                vertical-align: middle;
                            `;
                            
                            selectionElement.appendChild(iconSpan); 

                        	const memoInput = document.getElementById('memoInput');
                            if (coin[1]) {
                                memoInput.style.display = 'block';
                            } else {
                                memoInput.style.display = 'none';
                            }                            

                        }

                        modal.classList.add('hidden');
                    });

                }
                
                coinListContainer.appendChild(item);
            });
        }
        
    });



//- script.
//- 	// Function to update memo visibility
//- 	const payWithSelect = document.querySelector('select[name="payWith"]');

//- 	function updateMemoVisibility() {
//- 		// Check if both elements exist
//- 		if (!payWithSelect || !memoInput) {
//- 			console.warn('Required elements not found');
//- 			return;
//- 		}
		
//- 		// Simple check: if select has a value, show memo input
//- 		if (payWithSelect.value) {
//- 			memoInput.style.display = 'block';
//- 		} else {
//- 			memoInput.style.display = 'none';
//- 		}
//- 	}

//- 	// Add event listener
//- 	if (payWithSelect) {
//- 		payWithSelect.addEventListener('change', updateMemoVisibility);
//- 	}

//- 	// Initial call to set correct visibility
//- 	updateMemoVisibility();
