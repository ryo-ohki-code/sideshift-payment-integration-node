//- crypto.pug
doctype html
html 
	head 
		if(ratio)
			title Preview payment
		else if(shift)
			title Shift payment
		else
			title Error

		meta( name="robots" content="noindex")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")

		link(rel='stylesheet' href='/payment-processor.css')
		link(rel='stylesheet' href='/animation.css')


	body 
		div
			//- Preview payment page
			if(ratio)

				if(!invoice)
					h2 Error - No invoice Data


				if(ratio.error)
					h2 API error
					if(ratio.error.message)
						p=ratio.error.message
				else
					-totalCrypto = Number(invoice.cryptoTotal / Number(ratio.rate)).toFixed(8)
					-invoiceTotal = Number(invoice.total).toLocaleString(CURRENCY_SETTING.locale,{style:'currency', currency: CURRENCY_SETTING.currency})

					form(method="post" action="/create-payment").form-checkout
						h1 Order: #{invoice.id}
						h2 Pay #{invoiceTotal} with
						img(src="/icons/"+ratio.depositCoin+"-"+ratio.depositNetwork+".svg" width="100px" height="100px")
						h2 #{ratio.depositCoin} (#{ratio.depositNetwork})
						
						if(invoice.isMemo === "true")
							p: b This coin need a Memo.
									br
									| Don't forget to set the destination wallet Memo when sending or your coins can be lost.
									br

						p Prepare to send nearby 
							b #{totalCrypto} #{ratio.depositCoin} (#{ratio.depositNetwork}).
						
						p Exact amout will be calculated next step.
						p You will have 
							b 15 minutes 
							| to send the coins, set everything before going to the next step.
						

						div.styleform
							input(type="hidden" name="coin" value=ratio.depositCoin )
							input(type="hidden" name="network" value=ratio.depositNetwork )
							input(type="hidden" name="total" value=invoice.total)
							input(type="hidden" name="id" value=invoice.id)

							br
							button(type="submit").btn.paybutton Go to Pay Page
							br
							br
							if(ratio.depositCoin.toUpperCase().includes('USD'))
								h3 Why do I need to pay more than #{invoiceTotal}?
								p The total amount includes both your invoice and blockchain network fees. You're sending nearby #{totalCrypto} #{ratio.depositCoin} to ensure everything processes correctly.
									br
									br



			//- Shift payment page 
			if(shift)
				br
				div.form-checkout.main-wrapper(style="max-width:1200px;")
					h1 Paying order: #{invoice.id}
					div#PAYMENT_STATUS
						if(shift.status == "waiting")
							h2.waiting Waiting your #{shift.depositCoin} (#{shift.depositNetwork}) payment

						else if(shift.status == "pending")
							h2.pending #{shift.depositCoin} (#{shift.depositNetwork}) Payment detected, waiting confirmation

						else if(shift.status == "processing")
							h2.processing Deposit confirmed

						else if(shift.status == "settling")
							h2.settling Payment near 100% completed
						
						else if(shift.status == "settled")
							h2.settled Payment completed !
							//- REDIRECT TO SUCCESS PAGE from server side
						
						else if(shift.status == "expired")
							h2.expired Payment address expired !
							//- REDIRECT TO CANCEL PAGE
							
						else
							h2 Invalid status

						
		
					br

					div.content-wrapper 
					
						div#QR_CODE_DIV.left-section
							div#QR_CODE
								.qr-container
									canvas#qrcode
							p Expire in
								br
								span#EXPIREAT.timer #{(new Date(shift.expiresAt)).toLocaleString('en-EN')}


						div#ICON.right-section
							//- if(shift.status != "expired")
							div
								img(src="/icons/"+shift.depositCoin+"-"+shift.depositNetwork+".svg" width="100px" height="100px").flip-animation
								


							//- if(shift.status != "expired")
							div#SEND_AMOUNT.table-container(style="margin-top:20px;")
								table
									if(shift.status == "waiting")
										th.send-amount Send exactly
									else
										th.send-amount Amount
									td #{shift.depositAmount}
										//- Copy to clipboard
										button(style="float:right;" onclick="copyToClipboard('COPY_AMOUNT')")#COPY_AMOUNT.copy-btn 
											img(src="/copy.png" width="20px" style="")
											span  Copy

									tr
								



							//- if(shift.status == "waiting")
							div#SEND_ADDRESS 
								h3 To (#{shift.depositNetwork})
								div.table-container
									table
										if(!depositLink)
											th.wallet: b #{shift.depositAddress}
										else
											th.wallet 
												div.wallet-container
													
													//- Explorer link
													a(href=depositLink target="_blank").explorer-link
														img(src="/eye.png" width="30px")
													
													//- Address
													span #{shift.depositAddress} 

													//- Copy to clipboard
													button(onclick="copyToClipboard('COPY_ADDRESS')")#COPY_ADDRESS.copy-btn 
														img(src="/copy.png" width="20px")
														span  Copy
										tr 

									//- Memo
									if(shift.depositMemo)
										table
											th Wallet Memo
											td #{shift.depositMemo}
												button(onclick="copyToClipboard('COPY_MEMO')")#COPY_MEMO.copy-btn
													img(src="/copy.png" width="20px" style="margin-left:8px;vertical-align: middle;")
													span  Copy
											tr

									//- if(shift.depositHash && shift.settleHash)
									table(style="display: none;")#HASH
										th Deposit hash (#{shift.depositNetwork})
										td#DEPOSIT_HASH #{shift.depositHash}
										td #{shift.depositAmount} #{shift.depositCoin}
										tr
										th settle Hash (#{shift.settleNetwork})
										td#SETTLE_HASH #{shift.settleHash}
										td #{shift.settleAmount} #{shift.settleCoin}
										tr


									div.button-group
										button(onclick="payWithMetamask()" style="").metamask-btn Send with Metamask



					br
					-averageShiftMinutes = Math.floor(shift.averageShiftSeconds / 60);
					if(averageShiftMinutes > 0)
						p#INFO Average shift processing delay: #{averageShiftMinutes} minute(s) once pending
					else 
						p#INFO Average shift processing delay: less than 1 minute once pending
						


					div.order-info
						p.info-left Creation Date: #{(new Date(shift.createdAt)).toLocaleString('en-EN')}
						a(href="/cancel-shift/"+shift.id+"/"+invoice.id)
							button.btn.cancelbtn Cancel Payment

						p.info-right Payment ID: #{shift.id}
					

				
				br
				br
				br
				br



if(shift)
	script(src="https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js")
	script.
		const shiftData = !{JSON.stringify(shift)};
		const COPY_TIMEOUT = 2000;
		const UPDATE_TIMEOUT = 20000;
		const TIMER_TIMEOUT = 1000;
		
		//- QR code
		const qrData = shiftData.depositAddress;
		if(qrData){
			function generateQR(data) {
				const qr = new QRious({
					element: document.getElementById('qrcode'),
					value: data,
					size: 200,
					level: 'H',
					background: 'white',
					foreground: 'black'
				});
			}
			generateQR(qrData)			
		}

		//- Timer
		function updateTimer() {
			let now = Date.now();
			let expireAt = new Date(shiftData.expiresAt).valueOf();
			let diff = (expireAt - now) / 1000; //- Convert to seconds
			
			if (diff <= 0) {
				document.getElementById("EXPIREAT").innerText = "Expired";
				return;
			}
			
			//- Calculate minutes and seconds
			let minutes = Math.floor(diff / 60);
			let seconds = Math.floor(diff % 60);
			
			//- Format with leading zeros
			let formattedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
			
			document.getElementById("EXPIREAT").innerText = formattedTime;
		}
		updateTimer();
		//- Update every TIMER_TIMEOUT
		let timerInterval = setInterval(updateTimer, TIMER_TIMEOUT);


		const toUpdateContainer = document.getElementById('PAYMENT_STATUS');
		const iconContainer = document.getElementById('ICON');
		const sendAmountContainer = document.getElementById('SEND_AMOUNT');
		const sendAddressElement = document.getElementById('SEND_ADDRESS');
		const qrCodeElement = document.getElementById('QR_CODE');
		const qrCodeDivElement = document.getElementById('QR_CODE_DIV');
		const hashElement = document.getElementById('HASH');
		const infoElement = document.getElementById('INFO');

		//- Hide icon and containers on error
		function hideElement(){
			if (iconContainer) iconContainer.style.display = 'none';
			if (sendAmountContainer) sendAmountContainer.style.display = 'none';
			if (sendAddressElement) sendAddressElement.style.display = 'none';
			if (qrCodeElement) qrCodeElement.style.display = 'none';
			if (hashElement) hashElement.style.display = 'none';			
		}	

		//- Update shift data
		function autoRefresh() {
			fetch('/polling/api?shiftId=' + shiftData.id)
				.then(response => response.json())
				.then(data => {
					//- If no data try the SideShift API
					if(!data){
						fetch('https://sideshift.ai/api/v2/shifts/' + shiftData.id)						
						.then(responseApi => responseApi.json())
						.then(dataApi => {
							data = dataApi;
						})
						.catch(errorApi => {
							console.error('Error fetching SideShift API:', errorApi);

						});
						
					}

					if (data) {
						const statusContent = {
							"waiting": `Waiting your ${data.depositCoin} (${data.depositNetwork}) payment`,
							"pending": `${data.depositCoin} (${data.depositNetwork}) Payment detected, waiting confirmation`,
							"processing": "Deposit confirmed",
							"settling": "Payment near 100% completed",
							"settled": "Payment completed !",
							"expired": "Payment address expired !"
						};

						const content = statusContent[data.status] || "Invalid status";
						const html = `<h2 class="${data.status}">${content}</h2>`;
            
						toUpdateContainer.innerHTML = html;

						//- Update icon visibility based on status
						if (iconContainer) {
							if (data.status === "expired") {
								iconContainer.style.display = 'none';
							} else {
								iconContainer.style.display = 'flex';
							}
						}

						//- Stop polling when payment is completed or expired and redirect user by reloading the page.
						if (data.status === "settled" || data.status === "expired") {
							clearInterval(pollInterval);
							//- console.log('Polling stopped - Payment status:', data.status);

							if (data.status === "settled"){
								//- Add txhash
								if (hashElement) hashElement.style.display = 'block';
								document.getElementById('DEPOSIT_HASH').innerText = data.depositHash;
								document.getElementById('SETTLE_HASH').innerText = data.settleHash;
							}
							
							//- Display redirection message
							infoElement.textContent = 'The page will redirect you automatically in 5 seconds...';

							//-  Server will redirect to cancel or success page at reload.
							setTimeout(() => {
								location.reload();
							}, 5000);
						}
					} else {
						toUpdateContainer.innerHTML = '<div class="expired">No data received</div>';
						//- Hide icon and containers on no data
						hideElement();
					}
				})
			.catch(error => {
				console.error('Error:', error);
				toUpdateContainer.innerHTML = '<div class="expired">Error fetching shift data</div>';
				//- Hide icon and containers on error
				hideElement();

			});
		}
		const pollInterval = setInterval(autoRefresh, UPDATE_TIMEOUT);


		//- Copy to clipboard
		function copyToClipboard(buttonId) {
		    if (!buttonId) return;

			let value, buttonText;
			if(buttonId === "COPY_AMOUNT") {
				value = shiftData.depositAmount;
				buttonText = "Copy";
			}
			if(buttonId === "COPY_ADDRESS") {
				value = shiftData.depositAddress;
				buttonText = "Copy";
			}
			if(buttonId === "COPY_MEMO") {
				value = shiftData.depositMemo;
				buttonText = "Copy";
			}
			const buttonHtml = '<img src="/copy.png" width="20px"></img><span>Copy</span>';

			if (!value) {
				//- console.warn('No value to copy for button:', buttonId);
				return;
			}

			navigator.clipboard.writeText(value).then(() => {
				const button = document.getElementById(buttonId);
				button.textContent = 'Copied!';
				button.classList.add('copied');
				
				//- Accessibility attribute
				button.setAttribute('aria-label', 'Copied!');

				setTimeout(() => {
					//- Reset button text
					//- button.textContent = buttonText;
					button.innerHTML = buttonHtml;
					button.classList.remove('copied');
				    button.setAttribute('aria-label', buttonText);
				}, COPY_TIMEOUT);
			}).catch(err => {
				const button = document.getElementById(buttonId);
				button.textContent = 'Failed!';
				setTimeout(() => {
					button.textContent = buttonText;
				}, COPY_TIMEOUT);
			});
		}

		async function payWithMetamask(){

		}
